const repo = require("../repositories/reservation.repository"); // ğŸ“¦ Rezervasyonlara ait veritabanÄ± iÅŸlemleri iÃ§in repository import edilir

// âœ… Yeni rezervasyon oluÅŸtur
async function createReservation(data) {
  return await repo.create(data); // direkt olarak repo.create() fonksiyonunu Ã§aÄŸÄ±rÄ±r
}

// âœ… Belirli bir rezervasyonu ID ile getir
async function getReservation(id) {
  return await repo.getById(id); // id'ye gÃ¶re rezervasyon verisi dÃ¶ner
}

// âœ… KullanÄ±cÄ±nÄ±n yaptÄ±ÄŸÄ± tÃ¼m rezervasyonlarÄ± getir
async function getReservationsByUser(userId) {
  return await repo.getByUser(userId); // userId ile eÅŸleÅŸen rezervasyonlarÄ± getirir
}

// âœ… Rezervasyon gÃ¼ncelleme
async function updateReservation(id, data) {
  return await repo.update(id, data); // ID'ye gÃ¶re ilgili rezervasyonu gÃ¼nceller
}

// âœ… Rezervasyon silme
async function deleteReservation(id) {
  return await repo.remove(id); // ID ile silme iÅŸlemi yapÄ±lÄ±r
}

// âœ… Filtreli arama + sayfalama
async function searchReservations(filters, page, limit) {
  return await repo.search(filters, page, limit); // Ã¶rn: tarih, oda ID gibi filtrelerle arama
}

// ğŸŸ¡ Alternatif isimle tek rezervasyon getir â€” `getReservationById` fonksiyonu aslÄ±nda `getReservation` ile aynÄ± iÅŸi yapar
// GeliÅŸtirici farklÄ± isimlerde Ã§aÄŸÄ±rmak istemiÅŸ olabilir
async function getReservationById(id) {
  return await repo.getById(id);
}

// ğŸ“¤ Servis dÄ±ÅŸa aktarÄ±lÄ±r (controller kullanabilsin diye)
module.exports = {
  createReservation,
  getReservation,
  getReservationsByUser,
  updateReservation,
  deleteReservation,
  searchReservations,
  getReservationById,
};
